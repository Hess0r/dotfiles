let skip_defaults_vim=1
set nocompatible


" show line numbers
set number
" col and row info on bottom right
set ruler

" show command insert mode
set showmode
" show command under status line
set showcmd

" spacing settings for <TAB> and autoindents
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab
set expandtab

" does not change <EOL> on editing
set nofixendofline

" sets line numberong to fixed, instead of relative to current line
set norelativenumber

" no backup and swap files are created when editing or writing
set nobackup
set noswapfile
set nowritebackup

" set window icont text to the name of open file
set icon

" always show status line (even on last window)
set laststatus=2

" use visaul bell instead of beeping
" the t_vb sets the flash timing and coldrs
" empty t_vb will not show any flash
set visualbell
set t_vb=

" coc.nvim
set cmdheight=2
set hidden
set updatetime=300
set shortmess+=c
" coc.nvim end

" Ignoring files from fzf
set wildignore+=*/tmp/*
set wildignore+=*/vendor/
set wildignore+=*/node_modules/

colorscheme elflord

" enable syntax highlighting
syntax on
" enable plugins (if there are any) for the given filetype
filetype plugin on

" function to use when omni complete in insert mode
set omnifunc=syntaxcomplete#Complete

" install plug.vim if not installed
if v:version >= 800 && executable('curl') && empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vimplugins')
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'itchyny/lightline.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-fugitive'
  Plug 'sonph/onehalf', { 'rtp': 'vim/' }
  Plug 'preservim/nerdtree'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-commentary'
call plug#end()

" set onehalf colors
let g:lightline = { 'colorscheme': 'onehalfdark' }
if has("termguicolors")
  set termguicolors
endif
colorscheme onehalfdark

"Vim-go stuff
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = 'goimports'
let g:go_fmt_autosave = 1
let g:go_gopls_enabled = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 0

" coc.nvim stuff 
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-json', 
      \ 'coc-prettier',
      \ ]

  " tab for navigation in command complete window
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

  " <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

  " <CR> to select
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " <C-f> and <C-b> to scroll floating window
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

  " :Format to format current buffer
command! -nargs=0 Format :call CocAction('format')
  " :OR to organise imports
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

if has("nvim-0.5.0") || has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

  " K to call show documentation on preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
  " <c-o> to search symbol in current document
nnoremap <silent><nowait> <space>o :<C-u>CocList outline<cr>
  " Jump to next diagnostic
nmap <silent> [g <Plug>(coc-diagnostic-next)
  " Jump to previous diagnostic
nmap <silent> ]g <Plug>(coc-diagnostic-prev)
  " Call CocAction for current line
nnoremap <silent><nowait> <space>. :<C-u>CocAction<cr>

function! s:show_documentation()
  if (index(['vim', 'help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" keymapings
  " toggle NerdTree
nnoremap <C-b> :NERDTreeToggle<CR>
  " fuzzy file search
nnoremap <C-p> :Files<CR>
  " fuzzy buffer search
nnoremap <silent> <Leader>b :Buffers<CR>

autocmd FileType go nmap <leader>r :GoRun
autocmd FileType json syntax match Comment +\/\/.\+$+

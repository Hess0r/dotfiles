let skip_defaults_vim=1
set nocompatible

" autoindent new lines
set autoindent

" show line numbers
set number

" col and row info on bottom right
set ruler
" show command insert mode
set showmode

set showcmd

set tabstop=2

set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab

if v:version >= 800
  set nofixendofline
endif

" replace tabs with spaces
set expandtab

set textwidth=80

set norelativenumber

set nobackup
set noswapfile
set nowritebackup

set icon

set laststatus=2

set visualbell
set t_vb=

" coc.nvim settings
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c

" Ignoring files from fzf
set wildignore+=*/tmp/*
set wildignore+=*/vendor/
set wildignore+=*/node_modules/

"set background=dark
colorscheme elflord

syntax on

"set ttyfast

filetype plugin on
set omnifunc=syntaxcomplete#Complete

if v:version >= 800 && executable('curl') && empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vimplugins')
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
  Plug 'itchyny/lightline.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-fugitive'
  Plug 'sonph/onehalf', { 'rtp': 'vim/' }
  Plug 'preservim/nerdtree'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-commentary'
call plug#end()

" set onehalf colors
let g:lightline = { 'colorscheme': 'onehalfdark' }
if has("termguicolors")
  set termguicolors
endif
colorscheme onehalfdark

"Vim-go stuff
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = 'goimports'
let g:go_fmt_autosave = 1
let g:go_gopls_enabled = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 0

" coc.nvim stuff 
let g:coc_global_extensions = [ 'coc-tsserver', 'coc-json' ]

  " tab for navigation
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

  " <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

  " <CR> to select
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " <C-f> and <C-b> to scroll floating window
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

  " :Format to format current buffer
command! -nargs=0 Format :call CocAction('format')

" keymapings
nnoremap <C-b> :NERDTreeToggle<CR>
nnoremap <C-p> :Files<CR>

autocmd FileType go nmap <leader>r :GoRun
autocmd FileType json syntax match Comment +\/\/.\+$+
